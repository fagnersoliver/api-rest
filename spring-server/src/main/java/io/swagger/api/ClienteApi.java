/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cliente;
import io.swagger.model.Clientes;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-06-27T02:40:16.396Z")

@Api(value = "cliente", description = "the cliente API")
public interface ClienteApi {

    @ApiOperation(value = "Altera um cliente existente", nickname = "alteraExistente", notes = "Altera um cliente existente", response = Cliente.class, tags={ "Manutencao", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Sucesso ao alterar o cliente existente.", response = Cliente.class),
        @ApiResponse(code = 400, message = "Alteração inválida."),
        @ApiResponse(code = 401, message = "Alteração não autorizado."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a consulta.") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Cliente> alteraExistente(@ApiParam(value = "ID do cliente",required=true) @PathVariable("id") Integer id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Cliente cliente);


    @ApiOperation(value = "Altera status por id", nickname = "alteraStatusPorId", notes = "Esta operação tem como objetivo alterar o status do cliente por id.", response = Cliente.class, tags={ "Manutencao", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Sucesso ao alterar o status de um cliente.", response = Cliente.class),
        @ApiResponse(code = 400, message = "Alteração de status inválida."),
        @ApiResponse(code = 401, message = "Alteração de status não autorizada."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a consulta.") })
    @RequestMapping(value = "/cliente/{status}/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Cliente> alteraStatusPorId(@ApiParam(value = "Status do cliente.",required=true, allowableValues = "\"ativo\", \"inativo\"") @PathVariable("status") String status,@ApiParam(value = "Numero do id do cliente.",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Cadastro de um novo cliente", nickname = "cadastraNovo", notes = "Esta operação tem como objetivo cadastrar um novo cliente", response = Cliente.class, tags={ "Cadastro", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Sucesso ao cadastrar o novo cliente.", response = Cliente.class),
        @ApiResponse(code = 400, message = "Cadastro inválido."),
        @ApiResponse(code = 401, message = "Cadastro não autorizado."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a consulta.") })
    @RequestMapping(value = "/cliente",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Cliente> cadastraNovo(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Cliente cliente);


    @ApiOperation(value = "Consulta o cliente existente pelo ID", nickname = "consultaPorId", notes = "Essa consulta tem por objetivo consultar um cliente existente por ID", response = Clientes.class, tags={ "Consulta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso ao consultar o cliente existente por id.", response = Clientes.class),
        @ApiResponse(code = 400, message = "Alteração inválida."),
        @ApiResponse(code = 404, message = "Nenhum cliente com esse id."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a consulta.") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Cliente> consultaPorId(@ApiParam(value = "Numero do id do cliente.",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Consulta pelo sobrenom um cliente existente", nickname = "consultaPorSobrenome", notes = "Consulta o cliente por sobrenome", response = Clientes.class, tags={ "Consulta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso ao consultar o cliente existente por id.", response = Clientes.class),
        @ApiResponse(code = 400, message = "Consulta inválida."),
        @ApiResponse(code = 401, message = "Consulta não autorizada."),
        @ApiResponse(code = 404, message = "Nenhum cliente encontrado."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar  realizar a consulta.") })
    @RequestMapping(value = "/cliente/consulta/{sobrenome}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Clientes> consultaPorSobrenome(@ApiParam(value = "Sobrenome do cliente.",required=true) @PathVariable("sobrenome") String sobrenome);


    @ApiOperation(value = "Exclui um cliente existente", nickname = "excluiExistente", notes = "Essa operação tem como objetivo excluir um cliente existente.", tags={ "Exclusao", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Sucesso ao excluir um cliente existente."),
        @ApiResponse(code = 400, message = "Exclusao inválida."),
        @ApiResponse(code = 401, message = "Exclusão não autorizada."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar  realizar a consulta.") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> excluiExistente(@ApiParam(value = "Numero do id do cliente.",required=true) @PathVariable("id") Integer id);

}
